{% from 'templates/common.jinja2' import abbreviate_int_type %}
{% from 'templates/common.jinja2' import select_type_to_code_type %}
{% from 'templates/common.jinja2' import cfg %}

/*******************************************************************************
*
* Copyright (C) 2016 Proximetry Inc. All rights reserved.
* Authors: Proximetry (www.proximetry.io)
*
* THIS SOFTWARE IS PROVIDED BY PROXIMETRY "AS IS" AND ANY EXPRESS OR IMPLIED
* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
* EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL PROXIMETRY BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
* OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*
******************************************************************************/

/**
 * @file prox_agent.c
 * @brief Proximetry Agent - Application
 */

#include <helpers/prox_helpers.h>
#include <lib/prox.h>
#include "prox_agent.h"
#include <prox_config.h>
#include <prox_data.h>

{# Agent is defined first in cfgmap and should therefore be the first middleware in list#}
#define PROX_AGENT_VER     TOSTR(PROX_DEVICE_MODEL)"."TOSTR(PROX_MODEL_VER)"-"TOSTR(PROX_INSTANCE_VER)




{# Agent is defined first in cfgmap and should therefore be the first middleware in list #}
{# Ignore the rest as they are handled via reverse dependency lookups below. #}
{% set agent = middlewares | first %}

{% set alerts = agent.get_reverse_dependency('Alerts') or [] %}
{% set params = agent.get_reverse_dependency('Parameters') or [] %}
{% set stats = agent.get_reverse_dependency('Statistics') or [] %}

{# Get helpful subsets  #}
{% if params | length == 1 and params[0].configuration | length == 0  %}
{% set params_editable = [] %}
{% set params_string = [] %}
{% set params_string_editable =[] %}
{% else %}
{% set params_editable = params | selectattr('configuration.prox_param_editable') | list %}
{% set params_string = params | selectattr('configuration.prox_param_type', 'equalto', 'string') | list %}
{% set params_string_editable = params_string | selectattr('configuration.prox_param_editable') | list %}
{% endif %}

{% set num_params_editable= params_editable | length %}
{% set num_params_string = params_string | length %}
{% set num_params_string_editable = params_string_editable | length %}


{%- if num_params_string > 0 %}
/**
 * This application does not use dynamic memory allocation, all STRING configuration parameters must be statically allocated below.
 */

/* Statically allocated memory for string configuration parameters */
static struct str_agent_params_s
{
{%- for param_string in params_string %}
    {{ param_string.tpl.define_string() }};
{%- endfor %}
} str_agent_params;
{%- endif %}

/**
 * @brief Configuration Parameters definitions
 *
 * To define a Configuration Parameter apprropriate PROX_<TYPE>_CONF_CONF_PARAM_DEF macro should be used.
 * The macro requires to provide the Configuration Parameter ID. For STRING parameters a statically allocated memory reference must be provided.
 *
 * */
static prox_conf_param_t params[] = {
{%- for param in params %}
    {{ param.tpl.define_param('str_agent_params') }},
{%- endfor %}
};

/**
 * @brief Statistics definitions
 *
 * To define a Statistic apprropriate PROX_<TYPE>_STAT_DEF macro should be used.
 * The macro requires to provide the Statistic ID.
 *
 * */
static prox_stat_t stats[] =
{
{%- for stat in stats %}
    {{ stat.tpl.define_stat() }},
{%- endfor %}
};

/**
 * @brief Alerts definitions
 *
 * To define an Alert PROX_ALERT_DEF macro should be used.
 * The macro requires to provide the Alert ID.
 *
 * */
static prox_alert_t alerts[] =
{
{%- for alert in alerts %}
    {{ alert.tpl.define_alert() }},
{%- endfor %}
};

/**
 * Internal storage for Configuration Parameters, Statistics and Alerts.
 *
 * */
prox_vars_t prox_vars =
{
    .params = params,
    .params_num = ARRAY_ELEMS(params),
    .stats = stats,
    .stats_num = ARRAY_ELEMS(stats),
    .alerts = alerts,
    .alerts_num = ARRAY_ELEMS(alerts)
};

/********************************************************************************************************************************/
/*                                       misc routines                                                                    */
/********************************************************************************************************************************/

/**
 * @brief Returns the Proximetry Agent version string
 */
char* prox_get_agent_version(void)
{
	return PROX_AGENT_VER;
}

/**
 * @brief Prints the Proximetry Agent Application Configuration Parameters
 */
void prox_dump_conf_params(void)
{
{# This _could_ be inside read_and_log() #}
{%- for param in params %}
    {{ param.tpl.define_local_variable() }};
{%- endfor %}

{% if num_params_string %}
    char tmp_str[PROX_CONF_PARAM_STR_LEN];
{% endif %}

    // Read and print Configuration Parameter values from the Proximetry Library
{% for param in params %}
    {{ param.tpl.read_and_log('tmp_str') }}
{% endfor %}
}

/**
 * @brief Parameter changed callback function
 *
 * This function is invoked by the Proximetry Library, as a callback, when a Configuration Parameter modification is received from the Proximetry Portal.
 *
 */
void prox_conf_param_changed(uint32_t param_id)
{

{%- if num_params_string_editable %}
    char tmp_str[PROX_CONF_PARAM_STR_LEN];
{%- endif %}

    switch (param_id)
    {
{%- for param in params_editable %}
        case {{ param.tpl.get_id_define() }}:
            {% set param_type = param.tpl.get_type() -%}
            {%- set param_type_t = select_type_to_code_type(param_type) -%}
            {%- set param_name = param.tpl.get_name() -%}
            PROX_LOG("{{param_name}} change" EOL);
            {
                {{param_type_t}} value;
                {% if param_type == 'string' -%}
                value = tmp_str;
                prox_read_conf_param_{{abbreviate_int_type(param_type)}}({{param.tpl.get_id_define()}},value);
                {%- else -%}
                prox_read_conf_param_{{abbreviate_int_type(param_type)}}({{param.tpl.get_id_define()}},&value);
                {%- endif %}
                {{ param.tpl.get_callback_name() }}(value);
            }
            break;

{%- endfor %}
    default:
        break;
    }
}

{% for param in params %}
/**
 * @brief Configuration Parameters pusher
 *
 * Use this function to push {{param.tpl.get_name()}} value to the Proximetry Portal
 */
{{ param.tpl.define_setter() }}
{% endfor %}

{%- for alert in alerts %}
/**
 * @brief Alert setter: set
 *
 * Use this function to set {{alert.tpl.get_name()}} Alert
 */
{{ alert.tpl.define_setters_set() }}

/**
 * @brief Alert setter: clear
 *
 * Use this function to clear {{alert.tpl.get_name()}} Alert
 */
{{ alert.tpl.define_setters_clear() }}
{%- endfor %}

{%- for param in params_editable %}
/**
 * @brief Configuration Parameter change callback
 *
 * This function is called by the application when {{param.tpl.get_name()}} value change request is received from the Proximetry Portal.
 */
{{ param.tpl.define_callback() }}
{%- endfor %}


{%- for stat in stats %}
/**
 * @brief Statistic callback
 *
 * This function is called by the application to get {{stat.tpl.get_name()}} value
 */
{{ stat.tpl.define_callback() }}
{%- endfor %}

/*
 * @brief Update Statistic data
 *
 *  This functian is called by the Proximetry Library to get Statistics data.
 */
void prox_stats_update(void)
{
    // Get Statistics data
{%- for stat in stats %}
    {{ stat.tpl.get_stat_to_local_variable() }}
{%- endfor %}

    // Write Statistics data to the Proximetry Library
{%- for stat in stats %}
    {{ stat.tpl.get_stat() }}
{%- endfor %}

    // Print collected values
{%- for stat in stats %}
    {{ stat.tpl.log_stat() }}
{%- endfor %}

}

